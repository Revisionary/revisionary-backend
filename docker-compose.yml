version: "3.8"

services:
    backend:
        build:
            context: .
            args:
                API_SUBDOMAIN: ${API_SUBDOMAIN:-dpi}
                API_DOMAIN: ${API_DOMAIN:-revisionary.co}
        image: revisionary_backend:latest
        container_name: revisionary_backend
        restart: "always"
        env_file:
            - .env.local
        volumes:
            # - ./src/app:/backend/app
            # - ./src/assets:/backend/assets
            # - ./src/index.php:/backend/index.php
            - cache:/backend/cache
            - ./logs:/var/log/nginx
        networks:
            - backend-network

    memcached:
        image: memcached:latest
        container_name: revisionary_memcached
        restart: "always"
        command: ["-m", "512m"]
        networks:
            - backend-network

    database:
        image: mysql:latest
        container_name: revisionary_database
        restart: "unless-stopped"
        command: [
            "--character-set-server=utf8mb4",
            "--collation-server=utf8mb4_unicode_ci",
            "--slow_query_log=ON", # Make this off when in production !!!
            "--long_query_time=2",
            "--slow_query_log_file=/var/lib/mysql/mysql/slow_queries.log",
        ]
        environment:
            MYSQL_DATABASE: ${DB_NAME}
            MYSQL_USER: ${DB_USER}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
        volumes:
            - ./db/dump:/docker-entrypoint-initdb.d
            - mysql:/var/lib/mysql
        networks:
            - backend-network

    # phpmyadmin:
    #     image: phpmyadmin/phpmyadmin:latest
    #     container_name: revisionary_phpmyadmin
    #     restart: "unless-stopped"
    #     depends_on:
    #         - database
    #     ports:
    #         - 8000:80
    #     environment:
    #         PMA_HOSTS: ${DB_HOST}, ${DB_CLOUD_HOST}
    #         PMA_PORTS: ${DB_PORT}, ${DB_CLOUD_PORT}
    #         PMA_VERBOSES: Docker, Cloud
    #     networks:
    #         - backend-network

networks:
    backend-network: {}

volumes:
    mysql: {}
    cache: {}
